<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rack-leen&#39;s blog</title>
  
  <subtitle>时光无情，匆匆过后发已尽</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-09T02:39:27.616Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>rack-leen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>postgresql的存储过程</title>
    <link href="http://yoursite.com/2020/08/09/Postgresql/postgresql%E7%9A%84%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/08/09/Postgresql/postgresql的存储过程/</id>
    <published>2020-08-09T02:39:27.000Z</published>
    <updated>2020-08-09T02:39:27.616Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>redis的零拷贝</title>
    <link href="http://yoursite.com/2020/08/05/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/C/redis/redis%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2020/08/05/源码阅读/C/redis/redis的零拷贝/</id>
    <published>2020-08-05T15:55:18.000Z</published>
    <updated>2020-08-06T11:24:42.787Z</updated>
    
    <content type="html"><![CDATA[<h1>redis的零拷贝</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;redis的零拷贝&lt;/h1&gt;

      
    
    </summary>
    
      <category term="零拷贝技术" scheme="http://yoursite.com/categories/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="零拷贝技术" scheme="http://yoursite.com/tags/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>mq的零拷贝</title>
    <link href="http://yoursite.com/2020/08/05/Java/Java%E6%A1%86%E6%9E%B6/mq%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2020/08/05/Java/Java框架/mq的零拷贝/</id>
    <published>2020-08-05T15:55:11.000Z</published>
    <updated>2020-08-08T08:00:00.660Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="零拷贝技术" scheme="http://yoursite.com/tags/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    
      <category term="mq" scheme="http://yoursite.com/tags/mq/"/>
    
  </entry>
  
  <entry>
    <title>kafka的零拷贝</title>
    <link href="http://yoursite.com/2020/08/05/%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/kafka%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2020/08/05/工具安装与部署/kafka的零拷贝/</id>
    <published>2020-08-05T15:55:04.000Z</published>
    <updated>2020-08-05T15:55:04.023Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jvm的零拷贝</title>
    <link href="http://yoursite.com/2020/08/05/Java/jvm/jvm%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2020/08/05/Java/jvm/jvm的零拷贝/</id>
    <published>2020-08-05T15:54:56.000Z</published>
    <updated>2020-08-06T11:24:33.258Z</updated>
    
    <content type="html"><![CDATA[<h1>jvm的零拷贝</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;jvm的零拷贝&lt;/h1&gt;

      
    
    </summary>
    
      <category term="零拷贝技术" scheme="http://yoursite.com/categories/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="零拷贝技术" scheme="http://yoursite.com/tags/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>libevent的零拷贝</title>
    <link href="http://yoursite.com/2020/08/05/C/libevent/libevent%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2020/08/05/C/libevent/libevent的零拷贝/</id>
    <published>2020-08-05T15:54:42.000Z</published>
    <updated>2020-08-06T11:24:23.026Z</updated>
    
    <content type="html"><![CDATA[<h1>libevent的零拷贝</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;libevent的零拷贝&lt;/h1&gt;

      
    
    </summary>
    
      <category term="零拷贝技术" scheme="http://yoursite.com/categories/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="零拷贝技术" scheme="http://yoursite.com/tags/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>netty的零拷贝</title>
    <link href="http://yoursite.com/2020/08/05/Java/Java%E6%A1%86%E6%9E%B6/netty/netty%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2020/08/05/Java/Java框架/netty/netty的零拷贝/</id>
    <published>2020-08-05T15:54:34.000Z</published>
    <updated>2020-08-08T07:59:33.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="netty的零拷贝"><a class="header-anchor" href="#netty的零拷贝">¶</a>netty的零拷贝</h2><h3 id="netty逻辑层面的零拷贝"><a class="header-anchor" href="#netty逻辑层面的零拷贝">¶</a>netty逻辑层面的零拷贝</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;netty的零拷贝&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#netty的零拷贝&quot;&gt;¶&lt;/a&gt;netty的零拷贝&lt;/h2&gt;
&lt;h3 id=&quot;netty逻辑层面的零拷贝&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#net
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="零拷贝技术" scheme="http://yoursite.com/tags/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>linux五种IO模型</title>
    <link href="http://yoursite.com/2020/08/04/Linux/Linux%E8%BF%90%E7%94%A8%E6%8A%80%E6%9C%AF/linux%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/08/04/Linux/Linux运用技术/linux五种IO模型/</id>
    <published>2020-08-04T15:50:52.000Z</published>
    <updated>2020-08-08T12:15:58.617Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="IO模型" scheme="http://yoursite.com/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>1-绪论</title>
    <link href="http://yoursite.com/2020/07/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E7%89%88/1-%E7%BB%AA%E8%AE%BA/"/>
    <id>http://yoursite.com/2020/07/25/数据结构/数据结构C语言版/1-绪论/</id>
    <published>2020-07-25T08:06:31.000Z</published>
    <updated>2020-07-25T08:06:31.262Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux的用户态与核心态</title>
    <link href="http://yoursite.com/2020/06/26/Linux/Linux%E8%BF%90%E7%94%A8%E6%8A%80%E6%9C%AF/Linux%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E4%B8%8E%E6%A0%B8%E5%BF%83%E6%80%81/"/>
    <id>http://yoursite.com/2020/06/26/Linux/Linux运用技术/Linux的用户态与核心态/</id>
    <published>2020-06-26T03:21:59.000Z</published>
    <updated>2020-07-11T08:38:16.206Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>select-poll和epoll多路复用(事件驱动)技术</title>
    <link href="http://yoursite.com/2020/06/26/Linux/Linux%E8%BF%90%E7%94%A8%E6%8A%80%E6%9C%AF/select-poll%E5%92%8Cepoll%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8-%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2020/06/26/Linux/Linux运用技术/select-poll和epoll多路复用-事件驱动-技术/</id>
    <published>2020-06-26T03:05:16.000Z</published>
    <updated>2020-08-08T08:04:34.518Z</updated>
    
    <content type="html"><![CDATA[<h1>select-poll和epoll多路复用(事件驱动)技术</h1><blockquote><p>linux内核集成了select,poll和epoll三种NIO多路复用技术(多路复用使用事件驱动模型作为编程范式),多路复用技术可以一个进程同时监视多个文件描述符，在大并发条件下可以提高线程利用率，减少线程资源浪费。</p></blockquote><h2 id="select"><a class="header-anchor" href="#select">¶</a>select</h2><h3 id="原理解析"><a class="header-anchor" href="#原理解析">¶</a>原理解析</h3><h3 id="函数解析"><a class="header-anchor" href="#函数解析">¶</a>函数解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* According to POSIX.1-2001, POSIX.1-2008 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="comment">/* According to earlier standards */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*   </span></span><br><span class="line"><span class="comment">    Feature Test Macro Requirements for glibc (see feature_test_macros(7)):</span></span><br><span class="line"><span class="comment">        pselect(): _POSIX_C_SOURCE &gt;= 200112L</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pselect</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span></span><br><span class="line"><span class="function"><span class="params">                   fd_set *exceptfds, <span class="keyword">const</span> struct timespec *timeout,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">const</span> <span class="keyword">sigset_t</span> *sigmask)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="实际运用"><a class="header-anchor" href="#实际运用">¶</a>实际运用</h3><h2 id="poll"><a class="header-anchor" href="#poll">¶</a>poll</h2><h3 id="原理解析-v2"><a class="header-anchor" href="#原理解析-v2">¶</a>原理解析</h3><h3 id="函数解析-v2"><a class="header-anchor" href="#函数解析-v2">¶</a>函数解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* See feature_test_macros(7) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ppoll</span><span class="params">(struct pollfd *fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">const</span> struct timespec *tmo_p, <span class="keyword">const</span> <span class="keyword">sigset_t</span> *sigmask)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="实际运用-v2"><a class="header-anchor" href="#实际运用-v2">¶</a>实际运用</h3><h2 id="epoll"><a class="header-anchor" href="#epoll">¶</a>epoll</h2><h3 id="原理解析-v3"><a class="header-anchor" href="#原理解析-v3">¶</a>原理解析</h3><h3 id="函数解析-v3"><a class="header-anchor" href="#函数解析-v3">¶</a>函数解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create1</span><span class="params">(<span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_pwait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout, <span class="keyword">const</span> <span class="keyword">sigset_t</span> *sigmask)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="实际运用-v3"><a class="header-anchor" href="#实际运用-v3">¶</a>实际运用</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;select-poll和epoll多路复用(事件驱动)技术&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;linux内核集成了select,poll和epoll三种NIO多路复用技术(多路复用使用事件驱动模型作为编程范式),多路复用技术可以一个进程同时监视多个文件描述符，在大
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="IO模型" scheme="http://yoursite.com/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="多路复用" scheme="http://yoursite.com/tags/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>零拷贝技术</title>
    <link href="http://yoursite.com/2020/06/26/Linux/Linux%E8%BF%90%E7%94%A8%E6%8A%80%E6%9C%AF/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2020/06/26/Linux/Linux运用技术/零拷贝技术/</id>
    <published>2020-06-26T02:08:28.000Z</published>
    <updated>2020-08-09T04:51:43.285Z</updated>
    
    <content type="html"><![CDATA[<h1>零拷贝技术</h1><blockquote><p>零拷贝技术是linux下避免在内核态和用户态之间来回拷贝数据的技术。<br>零拷贝技术在系统层面有两种实现方式，一个是面向socket(网络数据的拷贝)，一个面向文件系统(文件间的数据拷贝)。</p></blockquote><h2 id="零拷贝的优点"><a class="header-anchor" href="#零拷贝的优点">¶</a>零拷贝的优点</h2><ul><li>减少cpu拷贝</li><li>减少内存带宽占用</li><li>减少用户空间和内核空间之间的上下文切换</li></ul><h2 id="none"><a class="header-anchor" href="#none">¶</a></h2><h2 id="零拷贝与多路复用-nio"><a class="header-anchor" href="#零拷贝与多路复用-nio">¶</a>零拷贝与多路复用(NIO)</h2><blockquote><p>事件驱动模型是多路复用IO使用的编程范式<br>多路复用IO的高效是由零拷贝技术实现的,需要传输的数据使用零拷贝技术被更快的拷贝到socket上,通过多路复用IO建立的网络通信进行传输</p></blockquote><h2 id="零拷贝原理"><a class="header-anchor" href="#零拷贝原理">¶</a>零拷贝原理</h2><blockquote><p>linux上零拷贝主要是减少数据的额外拷贝次数以及避免在内核态和用户态之间切换，因为普通状态下数据拷贝需要在内核态和用户态之间切换，不仅会增加数据拷贝次数，还会因为空间切换耗费额外性能。</p></blockquote><h3 id="用户态与核心态"><a class="header-anchor" href="#用户态与核心态">¶</a>用户态与核心态</h3><p>linux系统分为两个空间，用户空间和内核空间。内核空间主要驻留系统进程，用户空间驻留用户进程。用户进程要切换进内核态需要调用系统调用。<br><a href="/2020/06/26/Linux/Linux%E8%BF%90%E7%94%A8%E6%8A%80%E6%9C%AF/Linux%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E4%B8%8E%E6%A0%B8%E5%BF%83%E6%80%81/">Linux的用户态和内核态</a></p><h2 id="操作系统层面的零拷贝"><a class="header-anchor" href="#操作系统层面的零拷贝">¶</a>操作系统层面的零拷贝</h2><h3 id="sendfile"><a class="header-anchor" href="#sendfile">¶</a>sendfile</h3><blockquote><p>在两个文件描述符之间拷贝数据，面向socket网络传输的零拷贝系统调用,只适用于将数据从文件拷贝到socket上。</p></blockquote><h4 id="原理解析"><a class="header-anchor" href="#原理解析">¶</a>原理解析</h4><h4 id="函数解析"><a class="header-anchor" href="#函数解析">¶</a>函数解析</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sendfile.h&gt;</span></span></span><br><span class="line"><span class="keyword">ssize_t</span> sendfile (<span class="keyword">int</span> __out_fd, <span class="keyword">int</span> __in_fd, <span class="keyword">off_t</span> *__offset, <span class="keyword">size_t</span> __count) __THROW;</span><br><span class="line"><span class="keyword">ssize_t</span> sendfile64 (<span class="keyword">int</span> __out_fd, <span class="keyword">int</span> __in_fd, <span class="keyword">__off64_t</span> *__offset, <span class="keyword">size_t</span> __count) __THROW;</span><br></pre></td></tr></table></figure><h4 id="实际运用"><a class="header-anchor" href="#实际运用">¶</a>实际运用</h4><h3 id="mmap"><a class="header-anchor" href="#mmap">¶</a>mmap</h3><blockquote><p>面向文件系统拷贝数据的系统调用<br>用于申请内存空间，这个内存空间可以作为进程间通信的共享内存，拷贝文件时可以将文件映射到共享内存，不用在内核空间与用户空间之间切换。</p></blockquote><h4 id="原理解析-v2"><a class="header-anchor" href="#原理解析-v2">¶</a>原理解析</h4><h4 id="函数解析-v2"><a class="header-anchor" href="#函数解析-v2">¶</a>函数解析</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mmap</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> length, <span class="keyword">int</span> prot, <span class="keyword">int</span> flags, <span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">munmap</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="实际运用-v2"><a class="header-anchor" href="#实际运用-v2">¶</a>实际运用</h4><h3 id="splice"><a class="header-anchor" href="#splice">¶</a>splice</h3><blockquote><p>适用于两个文件描述符之间移动数据，splice利用linux的管道缓冲机制，需要一个文件描述符是表示管道设备。</p></blockquote><h4 id="原理解析-v3"><a class="header-anchor" href="#原理解析-v3">¶</a>原理解析</h4><h4 id="函数解析-v3"><a class="header-anchor" href="#函数解析-v3">¶</a>函数解析</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* See feature_test_macros(7) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="keyword">ssize_t</span> splice(<span class="keyword">int</span> fd_in, <span class="keyword">loff_t</span> *off_in, <span class="keyword">int</span> fd_out, <span class="keyword">loff_t</span> *off_out, <span class="keyword">size_t</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags);</span><br></pre></td></tr></table></figure><h4 id="实际运用-v3"><a class="header-anchor" href="#实际运用-v3">¶</a>实际运用</h4><h3 id="tee"><a class="header-anchor" href="#tee">¶</a>tee</h3><blockquote><p>linux种的管道命令，适用于管道描述符之间数据传输。</p></blockquote><h4 id="原理解析-v4"><a class="header-anchor" href="#原理解析-v4">¶</a>原理解析</h4><h4 id="实际运用-v4"><a class="header-anchor" href="#实际运用-v4">¶</a>实际运用</h4><h2 id="零拷贝技术的应用"><a class="header-anchor" href="#零拷贝技术的应用">¶</a>零拷贝技术的应用</h2><p><a href="/2020/08/05/Java/jvm/jvm%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/">jvm层面的零拷贝</a><br><a href="/2020/08/05/C/libevent/libevent%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/">libevent的零拷贝</a><br><a href="/2020/08/05/Java/Java%E6%A1%86%E6%9E%B6/netty/netty%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/">netty的零拷贝</a><br><a href="/2020/08/05/%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/kafka%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/">kafka的零拷贝</a><br><a href="/2020/08/05/Java/Java%E6%A1%86%E6%9E%B6/mq%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/">mq的零拷贝</a><br><a href="/2020/08/05/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/C/redis/redis%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D/">redis的零拷贝</a></p><h2 id="参考文献"><a class="header-anchor" href="#参考文献">¶</a>参考文献</h2><ol><li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-zerocopy1/index.html" target="_blank" rel="noopener">Linux 中的零拷贝技术，第 1 部分</a></li><li><a href="https://www.cnblogs.com/xing901022/p/8678869.html" target="_blank" rel="noopener">漫谈Java IO之 Netty与NIO服务器</a></li><li><a href="https://blog.csdn.net/u010793917/article/details/106659380" target="_blank" rel="noopener">深入理解Linux, NIO和Netty中的零拷贝(Zero-Copy)</a></li><li><a href="https://baijiahao.baidu.com/s?id=1669639041722396699&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">Netty常见面试题总结</a></li><li><a href="https://netty.io/wiki/related-articles.html" target="_blank" rel="noopener">Related articles</a></li><li><a href="https://www.jianshu.com/p/37a2bb9d1cae" target="_blank" rel="noopener">Java NIO（一）select 和 epoll底层实现原理</a></li><li><a href="https://wenchao.ren/2019/07/Select%E3%80%81Epoll%E3%80%81KQueue%E5%8C%BA%E5%88%AB/" target="_blank" rel="noopener">Select、poll、Epoll、KQueue区别</a></li><li><a href="https://blog.csdn.net/youxijishu/article/details/104815309/" target="_blank" rel="noopener">Netty零拷贝之CompositeByteBuf实际用法</a></li><li><a href="https://blog.csdn.net/thinking_fioa/article/details/80795673" target="_blank" rel="noopener">Netty专栏 （ 三）——— Netty的ByteBuf</a></li><li><a href="https://www.jianshu.com/p/2652686a43eb" target="_blank" rel="noopener">Netty-内存池化</a></li><li><a href="https://juejin.im/post/6844903703183360008" target="_blank" rel="noopener">彻底理解Netty</a></li><li><a href="https://www.jianshu.com/p/1ce3bc2d7c5e" target="_blank" rel="noopener">netty内存分配总览</a></li><li><a href="http://www.manongjc.com/detail/9-kyookzrhqhdwnos.html" target="_blank" rel="noopener">Netty中的装饰者模式</a></li><li><a href="https://www.cnblogs.com/twoheads/p/10712094.html" target="_blank" rel="noopener">操作系统层面聊聊BIO，NIO和AIO (epoll)</a></li><li><a href="https://www.cnblogs.com/kex1n/p/7446291.html" target="_blank" rel="noopener">linux网络编程：splice函数和tee( )函数高效的零拷贝</a></li><li><a href="https://www.man7.org/linux/man-pages/man2/sendfile.2.html" target="_blank" rel="noopener">sendfile man</a></li><li><a href="https://man7.org/linux/man-pages/man2/mmap.2.html" target="_blank" rel="noopener">mmap man</a></li><li><a href="https://man7.org/linux/man-pages/man2/splice.2.html" target="_blank" rel="noopener">splice man</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;零拷贝技术&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;零拷贝技术是linux下避免在内核态和用户态之间来回拷贝数据的技术。&lt;br&gt;
零拷贝技术在系统层面有两种实现方式，一个是面向socket(网络数据的拷贝)，一个面向文件系统(文件间的数据拷贝)。&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
      <category term="零拷贝技术" scheme="http://yoursite.com/categories/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="零拷贝技术" scheme="http://yoursite.com/tags/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>字段(Field)</title>
    <link href="http://yoursite.com/2020/01/21/Java/jvm/class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/%E5%AD%97%E6%AE%B5-Field/"/>
    <id>http://yoursite.com/2020/01/21/Java/jvm/class文件格式/字段-Field/</id>
    <published>2020-01-21T15:10:36.000Z</published>
    <updated>2020-01-21T15:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="field-字段"><a class="header-anchor" href="#field-字段">¶</a>Field(字段)</h2><p>每个字段都是由一个field_info结构体来描述。在一个class文件中不可能有两个相同字段名和描述符的字段。</p><p>field_info结构体格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">field_info &#123;</span><br><span class="line"> u2 access_flags;           <span class="comment">// 访问修饰符标志(public , protected,private等)</span></span><br><span class="line"> u2 name_index;             <span class="comment">// 在常量池中字段名所在的索引</span></span><br><span class="line"> u2 descriptor_index;       <span class="comment">// 在常量池中字段描述符所在的索引</span></span><br><span class="line"> u2 attributes_count;       <span class="comment">// 属性计数</span></span><br><span class="line"> attribute_info attributes[attributes_count];   <span class="comment">// 属性数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="access-flags"><a class="header-anchor" href="#access-flags">¶</a>access_flags</h3><p>字段的访问修饰符标志有以下这些：<br><img alt="field_access_flags" data-src="/2020/01/21/Java/jvm/class文件格式/字段-Field/field_access_flags.png" class="lazyload"></p><ol><li>一个类的字段可能有ACC_PUBLIC,ACC_PRIVATE,ACC_PROTECTED三种中的一种访问标志，并且必不可能有ACC_FINAL和ACC_VOLATILE访问标志。</li><li>一个接口的字段必须有ACC_PUBLIC,ACC_STATIC,ACC_FINAL三个访问标志被设置，并且ACC_SYNTHEIC可能会被设置，其他的访问标志必不可能被设置。</li><li>ACC_SYNTHEIC访问标志显示了这个字段是由编译器生成的，并且不会在写在源码中。</li><li>ACC_ENUM访问标志显示了这个字段是一个枚举类型的一个元素。</li><li>在以上表中未分配的访问标志项的所有位以待将来使用。它们在一个class文件中被设置为0，而且java虚拟机实现会忽视它们。</li></ol><h3 id="name-index"><a class="header-anchor" href="#name-index">¶</a>name_index</h3><p>name_index的值必须是是常量池表中一个有效索引。这个常量池索引指向的常量池项必须是一个代表一个有效unqualified名的CONTSANT_Utf-8_info结构体，这个结构体表示的就是这个字段。</p><h3 id="descriptor-index"><a class="header-anchor" href="#descriptor-index">¶</a>descriptor_index</h3><p>descriptor_index的值必须是常量池表中的一个有效索引。这个索引指向的常量池项必须是一个CONTSANT_Utf-8_info结构体，这个结构体代表一个有效的字段描述符。</p><h3 id="attribute-count"><a class="header-anchor" href="#attribute-count">¶</a>attribute_count</h3><p>attribute_count的值表示这个字段的附加属性的数量。</p><h3 id="attributes-attributes-count"><a class="header-anchor" href="#attributes-attributes-count">¶</a>attributes[attributes_count]</h3><ol><li>这个属性表的每个值必须是一个attribute_info结构体。以下就是attribute_info结构体：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">attribute_info &#123;</span><br><span class="line"> u2 attribute_name_index;</span><br><span class="line"> u4 attribute_length;</span><br><span class="line"> u1 info[attribute_length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>一个字段可能有与它有关联的一些可选属性。</li><li>这些属性的规范定义在以下field_info结构体的属性表中表示：<br><img alt="attribute_spec" data-src="/2020/01/21/Java/jvm/class文件格式/字段-Field/attribute_spec.png" class="lazyload"></li><li>查看属性表的详情请点击<a href>这里</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;field-字段&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#field-字段&quot;&gt;¶&lt;/a&gt;Field(字段)&lt;/h2&gt;
&lt;p&gt;每个字段都是由一个field_info结构体来描述。在一个class文件中不可能有两个相同字段名和描述符的字段。&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>方法(Method)</title>
    <link href="http://yoursite.com/2020/01/21/Java/jvm/class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/%E6%96%B9%E6%B3%95-Method/"/>
    <id>http://yoursite.com/2020/01/21/Java/jvm/class文件格式/方法-Method/</id>
    <published>2020-01-21T15:08:10.000Z</published>
    <updated>2020-01-21T15:11:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法-method"><a class="header-anchor" href="#方法-method">¶</a>方法(Method)</h2><p>每个方法，包括实例初始化方法和类或者接口初始化方法，它们都由method_info结构体来描述。<br>在一个class文件中不能有两个方法的方法名和方法描述符相同。<br>以下是方法结构体的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">method_info &#123;</span><br><span class="line"> u2 access_flags;       <span class="comment">// 方法修饰符</span></span><br><span class="line"> u2 name_index;         <span class="comment">// 方法名在常量池中的索引</span></span><br><span class="line"> u2 descriptor_index;   <span class="comment">// 描述符在常量池中的索引</span></span><br><span class="line"> u2 attributes_count;   <span class="comment">// 属性计数</span></span><br><span class="line"> attribute_info attributes[attributes_count];   <span class="comment">// 方法需要到的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="access-flags"><a class="header-anchor" href="#access-flags">¶</a>access_flags</h3><p>以下表是方法需要的访问修饰符：<br><img alt="method_access_flags" data-src="/2020/01/21/Java/jvm/class文件格式/方法-Method/method_access_flags.png" class="lazyload"></p><ol><li>一个类的每个方法可能有 ACC_PUBLIC, ACC_PRIVATE和ACC_PROTECTED之中的一个访问修饰符。</li><li>一个接口的方法可能有在上面的表中除了ACC_PROTECTED, ACC_FINAL, ACC_SYNCHRONIZED和ACC_NATIVE外的一些访问修饰符。</li><li>在一个版本号小于52.0(jdk8)的class文件中,一个接口的每个方法必须有ACC_PUBLIC和ACC_NATIVE访问修饰符被设置。</li><li>在一个版本号大等于52.0的class文件中，一个接口的每个方法必须有ACC_PUBLIC和ACC_PRIVATE中的一个访问修饰符被设置。</li><li>如果一个类或者接口的一个方法有ACC_ABSTRACT访问修饰符，那么 ACC_PRIVATE, ACC_STATIC, ACC_FINAL, ACC_SYNCHRONIZED,ACC_NATIVE或者ACC_STRICT都不能被设置。</li><li>每个实例初始化方法能够有ACC_PUBLIC,ACC_PRIVATE,ACC_PROTECTED其中一个访问修饰符被设置，并且也能设置 ACC_VARARGS, ACC_STRICT和ACC_SYNTHETIC这三个标志，但是不能设置这个表中的其他标志。</li><li>类和接口的初始化方法会被java虚拟机调用。它们的access_flags值除了设置的ACC_STRICT标志的值都会被忽略。</li><li>ACC_BRIDGE访问修饰符被用来表示一个由编译器生成的bridge method。</li><li>ACC_VARAGES标志用来表示这个方法在源码级别采用可变数量参数。</li><li>如果一个方法被声明为有可变数量的参数，则这个方法的ACC_VARAGES值被设置为1，如果是固定参数则设置为0。</li><li>ACC_SYNTHETIC标志表示这个方法由编译器生成并且不会在源码中显示，除非这个方法是在属性表的Synthetic属性中命名的方法之一。</li><li>在access_flags其他的没有提到的修饰符的所有位不会被分配，它们在class文件中都会被设置为0，并且被java虚拟机忽略。</li></ol><h3 id="name-index"><a class="header-anchor" href="#name-index">¶</a>name_index</h3><ol><li>name_index的值必须是常量池表中的一个有效索引。这个索引指向的常量池项必须是一个CONSTANT_Utf8_info结构体，这个结构体用来表示特殊的方法名<init>或<clinit>或一个有效的方法名中的一个。</clinit></init></li></ol><h3 id="descriptor-index"><a class="header-anchor" href="#descriptor-index">¶</a>descriptor_index</h3><ol><li>descriptor_index的值必须是常量池中的一个有效索引。这个索引指向的常量池项必须是一个CONSTANT_Utf8_info结构体,这个结构体用来表示一个有效的方法描述符。</li><li>如果方法的access_flags中的ACC_VARAGES标志被设置，那这个方法描述符的最后一个参数描述符需要是一个数组类型。</li></ol><h3 id="attributes-count"><a class="header-anchor" href="#attributes-count">¶</a>attributes_count</h3><ol><li>attributes_count的值表示这个方法的附加属性的数量。</li></ol><h3 id="attributes-attributes-count"><a class="header-anchor" href="#attributes-attributes-count">¶</a>attributes[attributes_count]</h3><ol><li>属性表的每个值必须是一个attribute_info结构体。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">attribute_info &#123;</span><br><span class="line"> u2 attribute_name_index;</span><br><span class="line"> u4 attribute_length;</span><br><span class="line"> u1 info[attribute_length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>一个字段可能有与它有关联的一些可选属性。</li><li>这些属性的规范定义在以下field_info结构体的属性表中表示：<br><img alt="attribute_spec" data-src="/2020/01/21/Java/jvm/class文件格式/方法-Method/attribute_spec.png" class="lazyload"></li><li>查看属性表的详情请点击<a href>这里</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法-method&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#方法-method&quot;&gt;¶&lt;/a&gt;方法(Method)&lt;/h2&gt;
&lt;p&gt;每个方法，包括实例初始化方法和类或者接口初始化方法，它们都由method_info结构体来描述。&lt;br&gt;
在
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>属性(Attributes)</title>
    <link href="http://yoursite.com/2020/01/21/Java/jvm/class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/%E5%B1%9E%E6%80%A7-Attributes/"/>
    <id>http://yoursite.com/2020/01/21/Java/jvm/class文件格式/属性-Attributes/</id>
    <published>2020-01-21T15:07:48.000Z</published>
    <updated>2020-01-22T13:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="属性-attributes"><a class="header-anchor" href="#属性-attributes">¶</a>属性(Attributes)</h2><p>属性被用在ClassFile,field_info,method_info和Code_attribute结构体中。<br>以下是所有属性的结构格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">attribute_info &#123;</span><br><span class="line"> u2 attribute_name_index;</span><br><span class="line"> u4 attribute_length;</span><br><span class="line"> u1 info[attribute_length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>对于所有的属性，attribute_name_index必须是这个类中的常量池中的一个有效的无符号16位索引；这个索引对应的常量池项必须是一个CONSTANT_Utf8_info结构体,它代表的是这个属性名。</li><li>attribute_length表示的是除了attribute_name_index和attribute_length(u2+u4=6个字节)所占长度之外的这个结构体所占的长度，也就是info[attribute_length]所占长度。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;属性-attributes&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#属性-attributes&quot;&gt;¶&lt;/a&gt;属性(Attributes)&lt;/h2&gt;
&lt;p&gt;属性被用在ClassFile,field_info,method_info和Code
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常量池</title>
    <link href="http://yoursite.com/2020/01/18/Java/jvm/class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
    <id>http://yoursite.com/2020/01/18/Java/jvm/class文件格式/常量池/</id>
    <published>2020-01-17T16:38:52.000Z</published>
    <updated>2020-01-28T10:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常量池"><a class="header-anchor" href="#常量池">¶</a>常量池</h2><blockquote><p>java虚拟机指令依赖在常量池表中的符号信息，而不是类，接口，类实例或者数组的运行时布局。</p></blockquote><p>所有的常量池项都遵循以下格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp_info &#123;</span><br><span class="line">u1 tag;</span><br><span class="line">u1 info[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在常量池表中的每个元素都有这个cp_info形式的结构，tag是一个元素的开始字段，占1位，用来表示cp_info这个结构是哪种结构(CONTSANT_Class_info等结构)。</li><li>info数组是tag表示的结构组成的数组。<br>以下就是tag与cp_info结构对应关系。value项就是常量类型在tag中的标志。当tag=7时，info里面就存储一个CONTSANT_Class类型的数组。<br><img alt="contant_pool_tag" data-src="/2020/01/18/Java/jvm/class文件格式/常量池/contant_pool_tag.png" class="lazyload"></li></ol><h3 id="constant-class-info结构体"><a class="header-anchor" href="#constant-class-info结构体">¶</a>CONSTANT_Class_info结构体</h3><h3 id="constant-fieldref-info-constant-methodref-info和constant-interfacemethodref-info结构体"><a class="header-anchor" href="#constant-fieldref-info-constant-methodref-info和constant-interfacemethodref-info结构体">¶</a>CONSTANT_Fieldref_info, CONSTANT_Methodref_info和CONSTANT_InterfaceMethodref_info结构体</h3><h3 id="constant-string-info-结构体"><a class="header-anchor" href="#constant-string-info-结构体">¶</a>CONSTANT_String_info 结构体</h3><h3 id="constant-integer-info和constant-float-info结构体"><a class="header-anchor" href="#constant-integer-info和constant-float-info结构体">¶</a>CONSTANT_Integer_info和CONSTANT_Float_info结构体</h3><h3 id="constant-long-info和constant-double-info结构体"><a class="header-anchor" href="#constant-long-info和constant-double-info结构体">¶</a>CONSTANT_Long_info和CONSTANT_Double_info结构体</h3><h3 id="constant-nameandtype-info结构体"><a class="header-anchor" href="#constant-nameandtype-info结构体">¶</a>CONSTANT_NameAndType_info结构体</h3><h3 id="constant-utf8-info结构体"><a class="header-anchor" href="#constant-utf8-info结构体">¶</a>CONSTANT_Utf8_info结构体</h3><h3 id="constant-methodhandle-info结构体"><a class="header-anchor" href="#constant-methodhandle-info结构体">¶</a>CONSTANT_MethodHandle_info结构体</h3><h3 id="constant-methodtype-info结构体"><a class="header-anchor" href="#constant-methodtype-info结构体">¶</a>CONSTANT_MethodType_info结构体</h3><h3 id="constant-invokedynamic-info结构体"><a class="header-anchor" href="#constant-invokedynamic-info结构体">¶</a>CONSTANT_InvokeDynamic_info结构体</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常量池&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#常量池&quot;&gt;¶&lt;/a&gt;常量池&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;java虚拟机指令依赖在常量池表中的符号信息，而不是类，接口，类实例或者数组的运行时布局。&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/categories/Java/JVM/"/>
    
      <category term="Class文件格式" scheme="http://yoursite.com/categories/Java/JVM/Class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="Class文件格式" scheme="http://yoursite.com/tags/Class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>描述符</title>
    <link href="http://yoursite.com/2020/01/17/Java/jvm/class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
    <id>http://yoursite.com/2020/01/17/Java/jvm/class文件格式/描述符/</id>
    <published>2020-01-16T16:11:41.000Z</published>
    <updated>2020-01-17T16:37:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述符"><a class="header-anchor" href="#描述符">¶</a>描述符</h2><h3 id="定义"><a class="header-anchor" href="#定义">¶</a>定义</h3><blockquote><p>一个描述符是一个表示一个字段或者方法类型的字符串。描述符通常是在class文件中用UTF-8的字符串来表示。</p></blockquote><h3 id="描述符的语法符号"><a class="header-anchor" href="#描述符的语法符号">¶</a>描述符的语法符号</h3><p>描述符用一种语法来进行规范。描述符的这种语法是一组形成各种语法正确的描述符的字符序列。</p><h3 id="描述符分类"><a class="header-anchor" href="#描述符分类">¶</a>描述符分类</h3><h4 id="字段描述符-field-descriptors"><a class="header-anchor" href="#字段描述符-field-descriptors">¶</a>字段描述符(Field Descriptors)</h4><p>字段描述符用来表示一个类，实例或者局部变量。以下就是所有的字段描述符：<br><img alt="field_desc" data-src="/2020/01/17/Java/jvm/class文件格式/描述符/field_desc.png" class="lazyload"></p><ol><li>B C D F I J S Z 都是基本类型在class文件中的表现形式。</li><li>&quot;Ljava/lang/String;“则是String类型在class文件中的表现形式,L表示其后的字符串是一个类名，以”;&quot;结尾。</li><li>数组在java中也是一个引用类型，数组在class文件中的表现形式为&quot;[&quot;,一个double[][]在class文件中的表现形式为[[D,[后面可以跟其他的字段描述符。</li></ol><h4 id="方法描述符-method-descriptors"><a class="header-anchor" href="#方法描述符-method-descriptors">¶</a>方法描述符(Method Descriptors)</h4><p>一个方法描述符包含0个或者多个参数描述符(参数都是字段描述符),它表现形式为：({ParameterDescriptor}) ReturnDescriptor。</p><ol><li>一般情况下，一个有返回值的方法表现为:({ParameterDescriptor}) ReturnDescriptor。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java方法：String test(int i , double d , String s)</span><br><span class="line">class形式：(IDLjava/lang/String;)Ljava/lang/String;</span><br><span class="line">int i      对应 I</span><br><span class="line">double d   对应 D</span><br><span class="line">String s   对应 Ljava/lang/String;</span><br><span class="line">返回值String对应 Ljava/lang/String;</span><br></pre></td></tr></table></figure><ol start="2"><li>如果是无返回值的方法，则表现为:({ParameterDescriptor}) V</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java方法：void test(int i , double d , String s)</span><br><span class="line">class形式：(IDLjava/lang/String;)V</span><br><span class="line">int i      对应 I</span><br><span class="line">double d   对应 D</span><br><span class="line">String s   对应 Ljava/lang/String;</span><br><span class="line">无返回值    对应 V</span><br></pre></td></tr></table></figure><ol start="3"><li>如果方法参数总长度在255之内(这个长度包括了实例的this或接口方法调用,long和double占2个长度,其他的占一个长度)，则判定一个方法描述符是有效的。</li><li>无论是一个类方法还是一个实例方法，方法相同的话，塔就是同一个方法描述符。虽然一个实例方法传递了this这个本对象引用，但是这个this不会在方法描述符中反映。这个this引用是通过java虚拟机的用来调用实例方法的指令来传递的。</li></ol><h3 id="代码举例"><a class="header-anchor" href="#代码举例">¶</a>代码举例</h3><ol><li>下面是我们需要的代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello world"</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>代码编译后，我们通过javap命令，获取class文件的详细信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">javac Test.java</span><br><span class="line">javap -v Test</span><br><span class="line"></span><br><span class="line">Classfile /home/share/Public/blog/source/_posts/Java/jvm/Test.class</span><br><span class="line">  Last modified <span class="number">2020</span>-<span class="number">1</span>-<span class="number">17</span>; size <span class="number">413</span> bytes</span><br><span class="line">  MD5 checksum adae6df967b28789efc582efe75101db</span><br><span class="line">  Compiled from <span class="string">"Test.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #6.#15         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Fieldref           #16.#17        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #3 = String             #18            // Hello world</span><br><span class="line">   #4 = Methodref          #19.#20        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">   #5 = Class              #21            // Test</span><br><span class="line">   #6 = Class              #22            // java/lang/Object</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable</span><br><span class="line">  #11 = Utf8               main</span><br><span class="line">  #12 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #13 = Utf8               SourceFile</span><br><span class="line">  #14 = Utf8               Test.java</span><br><span class="line">  #15 = NameAndType        #7:#8          // "&lt;init&gt;":()V</span><br><span class="line">  #16 = Class              #23            // java/lang/System</span><br><span class="line">  #17 = NameAndType        #24:#25        // out:Ljava/io/PrintStream;</span><br><span class="line">  #18 = Utf8               Hello world</span><br><span class="line">  #19 = Class              #26            // java/io/PrintStream</span><br><span class="line">  #20 = NameAndType        #27:#28        // println:(Ljava/lang/String;)V</span><br><span class="line">  #21 = Utf8               Test</span><br><span class="line">  #22 = Utf8               java/lang/Object</span><br><span class="line">  #23 = Utf8               java/lang/System</span><br><span class="line">  #24 = Utf8               out</span><br><span class="line">  #25 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #26 = Utf8               java/io/PrintStream</span><br><span class="line">  #27 = Utf8               println</span><br><span class="line">  #28 = Utf8               (Ljava/lang/String;)V  // 这个方法描述符表示:void func(String s)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V                           <span class="comment">// 这个方法描述符表示：void func() 这个方法描述符描述的是Test这个类</span></span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">1</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V       <span class="comment">// 这个方法描述符表示：void func(String[] s) 这个方法描述符描述的是main这个主函数</span></span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #3                  // String Hello world</span><br><span class="line">         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">4</span>: <span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"Test.java"</span></span><br></pre></td></tr></table></figure><ol start="3"><li></li></ol><h3 id="文献引用"><a class="header-anchor" href="#文献引用">¶</a>文献引用</h3><ol><li><a href="https://www.cnblogs.com/ynxf/p/8214100.html" target="_blank" rel="noopener">JNI字段描述符</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;描述符&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#描述符&quot;&gt;¶&lt;/a&gt;描述符&lt;/h2&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#定义&quot;&gt;¶&lt;/a&gt;定义&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/categories/Java/JVM/"/>
    
      <category term="Class文件格式" scheme="http://yoursite.com/categories/Java/JVM/Class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="Class文件格式" scheme="http://yoursite.com/tags/Class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>names的内部形式</title>
    <link href="http://yoursite.com/2020/01/15/Java/jvm/class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/names%E7%9A%84%E5%86%85%E9%83%A8%E5%BD%A2%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/01/15/Java/jvm/class文件格式/names的内部形式/</id>
    <published>2020-01-15T15:51:24.000Z</published>
    <updated>2020-01-15T16:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="names的内部形式"><a class="header-anchor" href="#names的内部形式">¶</a>names的内部形式</h2><h3 id="二进制类和接口的name"><a class="header-anchor" href="#二进制类和接口的name">¶</a>二进制类和接口的name</h3><ol><li>由于历史原因，在class文件中的二进制文件名书写语法与java文件的二进制文件名语法不同。</li><li>在Java文件中，我们一般将类和接口的名字写作为com.example.Text,用&quot;.&quot;来进行分隔。</li><li>在class文件中，我们则用com/example/Text这种形式，我们需要将&quot;.“替换为”/&quot;。</li><li>在class文件格式的描述符中使用的内部形式中，对类Text名称的引用被用CONSTANT_Utf-8_info结构表示字符串com/example/Text来实现。</li></ol><h3 id="unqualified-names"><a class="header-anchor" href="#unqualified-names">¶</a>unqualified names</h3><ol><li>方法名，字段名，本地变量名，和形参都作为unqualified name被存储。</li><li>一个unqualified name必须包含至少一个unicode编码点，并且不能包含任何一个ASCII编码字符串(.;[/)。</li><li>方法名必须要有约束，如果有特殊的方法名(比如<init>和<clint>)将会抛出异常。</clint></init></li><li>方法名必须不能包含ASCII字符&lt;或者&gt;。</li><li>一个字段名或者接口方法名可能会是<ciinit>或者<init>,但是没有方法调用指令去引用<clinit>方法，并且只有invokespecial指令可能会引用<cinit>方法。</cinit></clinit></init></ciinit></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;names的内部形式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#names的内部形式&quot;&gt;¶&lt;/a&gt;names的内部形式&lt;/h2&gt;
&lt;h3 id=&quot;二进制类和接口的name&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#二
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/categories/Java/JVM/"/>
    
      <category term="Class文件格式" scheme="http://yoursite.com/categories/Java/JVM/Class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="Class文件格式" scheme="http://yoursite.com/tags/Class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>spring-core模块(asm)</title>
    <link href="http://yoursite.com/2020/01/13/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/Java/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/spring-core/spring-core%E6%A8%A1%E5%9D%97(asm)/"/>
    <id>http://yoursite.com/2020/01/13/源码阅读/Java/Spring源码阅读/spring-core/spring-core模块(asm)/</id>
    <published>2020-01-13T14:28:51.000Z</published>
    <updated>2020-06-14T06:34:23.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-core模块-asm"><a class="header-anchor" href="#spring-core模块-asm">¶</a>spring-core模块(asm)</h2><h3 id="asm代码结构"><a class="header-anchor" href="#asm代码结构">¶</a>asm代码结构</h3><p><img alt="asm源码视图" data-src="/2020/01/13/源码阅读/Java/Spring源码阅读/spring-core/spring-core模块(asm)/asm%E6%BA%90%E7%A0%81%E8%A7%86%E5%9B%BE.png" class="lazyload"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring-core模块-asm&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#spring-core模块-asm&quot;&gt;¶&lt;/a&gt;spring-core模块(asm)&lt;/h2&gt;
&lt;h3 id=&quot;asm代码结构&quot;&gt;&lt;a class=&quot;header
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Java/Spring/"/>
    
      <category term="源码阅读" scheme="http://yoursite.com/categories/Java/Spring/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="spring-core" scheme="http://yoursite.com/categories/Java/Spring/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/spring-core/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="源码阅读" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="spring-core" scheme="http://yoursite.com/tags/spring-core/"/>
    
  </entry>
  
  <entry>
    <title>spring-jcl模块源码阅读</title>
    <link href="http://yoursite.com/2020/01/13/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/Java/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/spring-jcl/spring-jcl%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://yoursite.com/2020/01/13/源码阅读/Java/Spring源码阅读/spring-jcl/spring-jcl模块源码阅读/</id>
    <published>2020-01-13T14:28:51.000Z</published>
    <updated>2020-01-13T16:31:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-jcl模块源码阅读"><a class="header-anchor" href="#spring-jcl模块源码阅读">¶</a>spring-jcl模块源码阅读</h2><h3 id="spring-jcl模块功能"><a class="header-anchor" href="#spring-jcl模块功能">¶</a>spring-jcl模块功能</h3><p>spring-jcl是spring实现的日志模块，它为spring提供了一个适配四种日志类的统一日志接口,只要spring加载了四种模块中的哪一个，spring-jcl模块就能为spring提供一个统一的日志对象。<br>spring-jcl适配的四种日志类:</p><ol><li>org.apache.logging.log4j.spi.ExtendedLogger</li><li>org.apache.logging.slf4j.SLF4JProvider</li><li>org.slf4j.spi.LocationAwareLogger</li><li>org.slf4j.Logger</li></ol><h3 id="spring-jcl使用的设计模式"><a class="header-anchor" href="#spring-jcl使用的设计模式">¶</a>spring-jcl使用的设计模式</h3><ol><li>工厂模式,LogFactory使用工厂模式，用来创建日志对象。</li><li>适配器模式，LogAdapter使用适配器模式，用来适配加载的日志类。</li></ol><h3 id="spring-jcl代码结构"><a class="header-anchor" href="#spring-jcl代码结构">¶</a>spring-jcl代码结构</h3><p><img alt="spring-jcl" data-src="/2020/01/13/源码阅读/Java/Spring源码阅读/spring-jcl/spring-jcl模块源码阅读/spring-jcl.png" class="lazyload"><br>LogFactory是一个抽象类，也是spring-jcl模块暴露出来的接口，LogFactoryService是LogFactory的实现类，用来生产日志对象,它依赖LogAdapter,需要让LogAdapter提供日志对象。<br>LogAdapter用来适配四种日志类，将四种不同的日志类与spring兼容，提供统一的日志对象。<br>Log是一个接口，提供日志等级，默认有trace，debug，info，warn，error，fatal六种等级。NoOpLog与SimpleLog实现Log接口。</p><h3 id="spring-jcl实现流程"><a class="header-anchor" href="#spring-jcl实现流程">¶</a>spring-jcl实现流程</h3><p><img alt="spring-jcl结构" data-src="/2020/01/13/源码阅读/Java/Spring源码阅读/spring-jcl/spring-jcl模块源码阅读/spring-jcl%E7%BB%93%E6%9E%84.png" class="lazyload"></p><h3 id="spring源码"><a class="header-anchor" href="#spring源码">¶</a>spring源码</h3><h4 id="logfactory"><a class="header-anchor" href="#logfactory">¶</a>LogFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2019 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.commons.logging;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A minimal incarnation of Apache Commons Logging's &#123;<span class="doctag">@code</span> LogFactory&#125; API,</span></span><br><span class="line"><span class="comment"> * providing just the common &#123;<span class="doctag">@link</span> Log&#125; lookup methods. This is inspired</span></span><br><span class="line"><span class="comment"> * by the JCL-over-SLF4J bridge and should be source as well as binary</span></span><br><span class="line"><span class="comment"> * compatible with all common use of the Commons Logging API (in particular:</span></span><br><span class="line"><span class="comment"> * with &#123;<span class="doctag">@code</span> LogFactory.getLog(Class/String)&#125; field initializers).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation does not support Commons Logging's original provider</span></span><br><span class="line"><span class="comment"> * detection. It rather only checks for the presence of the Log4j 2.x API</span></span><br><span class="line"><span class="comment"> * and the SLF4J 1.7 API in the Spring Framework classpath, falling back to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> java.util.logging&#125; if none of the two is available. In that sense,</span></span><br><span class="line"><span class="comment"> * it works as a replacement for the Log4j 2 Commons Logging bridge as well as</span></span><br><span class="line"><span class="comment"> * the JCL-over-SLF4J bridge, both of which become irrelevant for Spring-based</span></span><br><span class="line"><span class="comment"> * setups as a consequence (with no need for manual excludes of the standard</span></span><br><span class="line"><span class="comment"> * Commons Logging API jar anymore either). Furthermore, for simple setups</span></span><br><span class="line"><span class="comment"> * without an external logging provider, Spring does not require any extra jar</span></span><br><span class="line"><span class="comment"> * on the classpath anymore since this embedded log factory automatically</span></span><br><span class="line"><span class="comment"> * delegates to &#123;<span class="doctag">@code</span> java.util.logging&#125; in such a scenario.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Note that this Commons Logging variant is only meant to be used for</span></span><br><span class="line"><span class="comment"> * infrastructure logging purposes in the core framework and in extensions.&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * It also serves as a common bridge for third-party libraries using the</span></span><br><span class="line"><span class="comment"> * Commons Logging API, e.g. Apache HttpClient, and HtmlUnit, bringing</span></span><br><span class="line"><span class="comment"> * them into the same consistent arrangement without any extra bridge jars.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;For logging need in application code, prefer direct use of Log4j 2.x</span></span><br><span class="line"><span class="comment"> * or SLF4J or &#123;<span class="doctag">@code</span> java.util.logging&#125;.&lt;/b&gt; Simply put Log4j 2.x or Logback</span></span><br><span class="line"><span class="comment"> * (or another SLF4J provider) onto your classpath, without any extra bridges,</span></span><br><span class="line"><span class="comment"> * and let the framework auto-adapt to your choice.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller (for the &#123;<span class="doctag">@code</span> spring-jcl&#125; variant)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用了工厂模式</span></span><br><span class="line"><span class="comment"> * 这个工厂用来生产jcl日志对象，需要用适配器适配对应的日志类，从而创建对象的日志对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convenience method to return a named logger.</span></span><br><span class="line"><span class="comment"> * 输入Class，通过Class获取类名，输入进需要调用的下面那个重载方法，获取对应的日志对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz containing Class from which a log name will be derived</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">getLog</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getLog(clazz.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convenience method to return a named logger.</span></span><br><span class="line"><span class="comment"> * 输入类名，使用适配器获取对应日志对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name logical name of the &lt;code&gt;Log&lt;/code&gt; instance to be returned</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">getLog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> LogAdapter.createLog(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method only exists for compatibility with unusual Commons Logging API</span></span><br><span class="line"><span class="comment"> * usage like e.g. &#123;<span class="doctag">@code</span> LogFactory.getFactory().getInstance(Class/String)&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getInstance(Class)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getInstance(String)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> in favor of &#123;<span class="doctag">@link</span> #getLog(Class)&#125;/&#123;<span class="doctag">@link</span> #getLog(String)&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LogFactory <span class="title">getFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LogFactory() &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面这两个方法是提供给外界的接口，用来获取工厂生产的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convenience method to return a named logger.</span></span><br><span class="line"><span class="comment"> * 调用getLog(Class&lt;?&gt; clazz)函数,返回日志对象</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This variant just dispatches straight to &#123;<span class="doctag">@link</span> #getLog(Class)&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz containing Class from which a log name will be derived</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> in favor of &#123;<span class="doctag">@link</span> #getLog(Class)&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Log <span class="title">getInstance</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getLog(clazz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convenience method to return a named logger.</span></span><br><span class="line"><span class="comment"> * 调用getLog(String name)，获取日志对象</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This variant just dispatches straight to &#123;<span class="doctag">@link</span> #getLog(String)&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name logical name of the &lt;code&gt;Log&lt;/code&gt; instance to be returned</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> in favor of &#123;<span class="doctag">@link</span> #getLog(String)&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Log <span class="title">getInstance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getLog(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="logfactoryservice"><a class="header-anchor" href="#logfactoryservice">¶</a>LogFactoryService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2018 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.commons.logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A minimal subclass of the standard Apache Commons Logging's &#123;<span class="doctag">@code</span> LogFactory&#125; class,</span></span><br><span class="line"><span class="comment"> * overriding the abstract &#123;<span class="doctag">@code</span> getInstance&#125; lookup methods. This is just applied in</span></span><br><span class="line"><span class="comment"> * case of the standard &#123;<span class="doctag">@code</span> commons-logging&#125; jar accidentally ending up on the classpath,</span></span><br><span class="line"><span class="comment"> * with the standard &#123;<span class="doctag">@code</span> LogFactory&#125; class performing its META-INF service discovery.</span></span><br><span class="line"><span class="comment"> * This implementation simply delegates to Spring's common &#123;<span class="doctag">@link</span> Log&#125; factory methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> since it is only meant to be used in the above-mentioned fallback scenario</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个类继承抽象类LogFactory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactoryService</span> <span class="keyword">extends</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个是用来存储存在的日志类名</span></span><br><span class="line"><span class="comment"> * jcl定义了四种日志类，这个集合最多能存放四个日志类名，使用ConcurrentHashMap保证在并发状态下的线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; attributes = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Log <span class="title">getInstance</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getInstance(clazz.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Log <span class="title">getInstance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> LogAdapter.createLog(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对加载进spring的日志类的操作，包括对加载删除，获取，设置等操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// Just in case some code happens to call uncommon Commons Logging methods...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.attributes.put(name, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.attributes.remove(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.attributes.remove(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.attributes.get(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] getAttributeNames() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.attributes.keySet().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="logadapter"><a class="header-anchor" href="#logadapter">¶</a>LogAdapter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2018 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.commons.logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.LogRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.spi.ExtendedLogger;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.spi.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.spi.LocationAwareLogger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring's common JCL adapter behind &#123;<span class="doctag">@link</span> LogFactory&#125; and &#123;<span class="doctag">@link</span> LogFactoryService&#125;.</span></span><br><span class="line"><span class="comment"> * Detects the presence of Log4j 2.x / SLF4J, falling back to &#123;<span class="doctag">@code</span> java.util.logging&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring为兼容四种日志所做的适配器</span></span><br><span class="line"><span class="comment"> * 使用的是适配器模式，适配者是四种日志，适配器是这个适配器类，最终创建一个适配spring框架的日志对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是四种日志类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOG4J_SPI = <span class="string">"org.apache.logging.log4j.spi.ExtendedLogger"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOG4J_SLF4J_PROVIDER = <span class="string">"org.apache.logging.slf4j.SLF4JProvider"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SLF4J_SPI = <span class="string">"org.slf4j.spi.LocationAwareLogger"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SLF4J_API = <span class="string">"org.slf4j.Logger"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LogApi是一个枚举类，用来枚举上面的四种日志类名 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LogApi logApi;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态代码块，在这个类加载人虚拟机时执行，并且只执行一次。</span></span><br><span class="line"><span class="comment"> * 判断哪个日志类被加载，然后返回对应枚举中的枚举值(这个枚举值是1,2,3等),这个枚举值用来判断需要使用哪个日志类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">/* 这里判断哪个日志类被加载 */</span></span><br><span class="line"><span class="keyword">if</span> (isPresent(LOG4J_SPI)) &#123;</span><br><span class="line"><span class="keyword">if</span> (isPresent(LOG4J_SLF4J_PROVIDER) &amp;&amp; isPresent(SLF4J_SPI)) &#123;</span><br><span class="line"><span class="comment">// log4j-to-slf4j bridge -&gt; we'll rather go with the SLF4J SPI;</span></span><br><span class="line"><span class="comment">// however, we still prefer Log4j over the plain SLF4J API since</span></span><br><span class="line"><span class="comment">// the latter does not have location awareness support.</span></span><br><span class="line">logApi = LogApi.SLF4J_LAL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Use Log4j 2.x directly, including location awareness support</span></span><br><span class="line">logApi = LogApi.LOG4J;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isPresent(SLF4J_SPI)) &#123;</span><br><span class="line"><span class="comment">// Full SLF4J SPI including location awareness support</span></span><br><span class="line">logApi = LogApi.SLF4J_LAL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isPresent(SLF4J_API)) &#123;</span><br><span class="line"><span class="comment">// Minimal SLF4J API without location awareness support</span></span><br><span class="line">logApi = LogApi.SLF4J;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// java.util.logging as default</span></span><br><span class="line">logApi = LogApi.JUL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LogAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create an actual &#123;<span class="doctag">@link</span> Log&#125; instance for the selected API.</span></span><br><span class="line"><span class="comment"> * 创建一个日志实例</span></span><br><span class="line"><span class="comment"> * 这里拿到flag，然后通过switch语句选择需要的创建日志对象的方法</span></span><br><span class="line"><span class="comment"> * 这些创建对象的方法是下面存在的静态内部类(静态内部类也只会产生一个实例)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name the logger name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">createLog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (logApi) &#123;</span><br><span class="line"><span class="keyword">case</span> LOG4J:</span><br><span class="line"><span class="keyword">return</span> Log4jAdapter.createLog(name);</span><br><span class="line"><span class="keyword">case</span> SLF4J_LAL:</span><br><span class="line"><span class="keyword">return</span> Slf4jAdapter.createLocationAwareLog(name);</span><br><span class="line"><span class="keyword">case</span> SLF4J:</span><br><span class="line"><span class="keyword">return</span> Slf4jAdapter.createLog(name);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// Defensively use lazy-initializing adapter class here as well since the</span></span><br><span class="line"><span class="comment">// java.logging module is not present by default on JDK 9. We are requiring</span></span><br><span class="line"><span class="comment">// its presence if neither Log4j nor SLF4J is available; however, in the</span></span><br><span class="line"><span class="comment">// case of Log4j or SLF4J, we are trying to prevent early initialization</span></span><br><span class="line"><span class="comment">// of the JavaUtilLog adapter - e.g. by a JVM in debug mode - when eagerly</span></span><br><span class="line"><span class="comment">// trying to parse the bytecode for all the cases of this switch clause.</span></span><br><span class="line"><span class="keyword">return</span> JavaUtilAdapter.createLog(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个就是用来判断输入的类名是否被加载，也就是是否存在</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPresent</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(className, <span class="keyword">false</span>, LogAdapter.class.getClassLoader());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这个就是上面需要的枚举类 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">enum</span> LogApi &#123;LOG4J, SLF4J_LAL, SLF4J, JUL&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面三个adapter就是四种日志的适配器,以静态内部类的形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1.第一个日志适配器 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">createLog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Log4jLog(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. 这里包含两个日志的适配器 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Slf4jAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">createLocationAwareLog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 先从日志工厂中获取日志对象</span></span><br><span class="line"><span class="comment">// 为什么需要通过日志工厂调用我们这个适配器类，创建日志对象再判断这个日志对象？</span></span><br><span class="line"><span class="comment">// 是因为LocationAwareLogger和Logger都属于slf4，我们需要这样来区别这两个日志类</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(name);</span><br><span class="line"><span class="comment">// 然后判断这个日志实例是不是我们需要的，如果是就将这个日志实例再封装为我们需要对象;如果不是，就重新创建一个对象</span></span><br><span class="line"><span class="keyword">return</span> (logger <span class="keyword">instanceof</span> LocationAwareLogger ?</span><br><span class="line"><span class="keyword">new</span> Slf4jLocationAwareLog((LocationAwareLogger) logger) : <span class="keyword">new</span> Slf4jLog&lt;&gt;(logger));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">createLog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Slf4jLog&lt;&gt;(LoggerFactory.getLogger(name));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 这里是最后一个日志适配器 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaUtilAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">createLog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JavaUtilLog(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面是四个适配器需要的四个适配者</span></span><br><span class="line"><span class="comment"> * 我们在spring中调用的日志对象需要的方法都是从四个日志类中获取的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jLog</span> <span class="keyword">implements</span> <span class="title">Log</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FQCN = Log4jLog.class.getName();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LoggerContext loggerContext =</span><br><span class="line">LogManager.getContext(Log4jLog.class.getClassLoader(), <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ExtendedLogger logger;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Log4jLog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.logger = loggerContext.getLogger(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFatalEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isEnabled(Level.FATAL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isErrorEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isEnabled(Level.ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWarnEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isEnabled(Level.WARN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInfoEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isEnabled(Level.INFO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDebugEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isEnabled(Level.DEBUG);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTraceEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isEnabled(Level.TRACE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatal</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">log(Level.FATAL, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatal</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">log(Level.FATAL, message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">log(Level.ERROR, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">log(Level.ERROR, message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">log(Level.WARN, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">log(Level.WARN, message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">log(Level.INFO, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">log(Level.INFO, message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">log(Level.DEBUG, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">log(Level.DEBUG, message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">log(Level.TRACE, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">log(Level.TRACE, message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Level level, Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"><span class="comment">// Explicitly pass a String argument, avoiding Log4j's argument expansion</span></span><br><span class="line"><span class="comment">// for message objects in case of "&#123;&#125;" sequences (SPR-16226)</span></span><br><span class="line"><span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.logIfEnabled(FQCN, level, <span class="keyword">null</span>, (String) message, exception);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.logIfEnabled(FQCN, level, <span class="keyword">null</span>, (String) message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.logIfEnabled(FQCN, level, <span class="keyword">null</span>, message, exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Slf4jLog</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Logger</span>&gt; <span class="keyword">implements</span> <span class="title">Log</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> T logger;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Slf4jLog</span><span class="params">(T logger)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = logger.getName();</span><br><span class="line"><span class="keyword">this</span>.logger = logger;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFatalEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> isErrorEnabled();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isErrorEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isErrorEnabled();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWarnEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isWarnEnabled();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInfoEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isInfoEnabled();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDebugEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isDebugEnabled();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTraceEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isTraceEnabled();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatal</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">error(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatal</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">error(message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isErrorEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.error(String.valueOf(message));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isErrorEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.error(String.valueOf(message), exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.warn(String.valueOf(message));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.warn(String.valueOf(message), exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.info(String.valueOf(message));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.info(String.valueOf(message), exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.debug(String.valueOf(message));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.debug(String.valueOf(message), exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.trace(String.valueOf(message));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.trace(String.valueOf(message), exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Slf4jAdapter.createLog(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Slf4jLocationAwareLog</span> <span class="keyword">extends</span> <span class="title">Slf4jLog</span>&lt;<span class="title">LocationAwareLogger</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FQCN = Slf4jLocationAwareLog.class.getName();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Slf4jLocationAwareLog</span><span class="params">(LocationAwareLogger logger)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(logger);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatal</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">error(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatal</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">error(message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isErrorEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.log(<span class="keyword">null</span>, FQCN, LocationAwareLogger.ERROR_INT, String.valueOf(message), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isErrorEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.log(<span class="keyword">null</span>, FQCN, LocationAwareLogger.ERROR_INT, String.valueOf(message), <span class="keyword">null</span>, exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.log(<span class="keyword">null</span>, FQCN, LocationAwareLogger.WARN_INT, String.valueOf(message), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.log(<span class="keyword">null</span>, FQCN, LocationAwareLogger.WARN_INT, String.valueOf(message), <span class="keyword">null</span>, exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.log(<span class="keyword">null</span>, FQCN, LocationAwareLogger.INFO_INT, String.valueOf(message), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.log(<span class="keyword">null</span>, FQCN, LocationAwareLogger.INFO_INT, String.valueOf(message), <span class="keyword">null</span>, exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.log(<span class="keyword">null</span>, FQCN, LocationAwareLogger.DEBUG_INT, String.valueOf(message), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.log(<span class="keyword">null</span>, FQCN, LocationAwareLogger.DEBUG_INT, String.valueOf(message), <span class="keyword">null</span>, exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.log(<span class="keyword">null</span>, FQCN, LocationAwareLogger.TRACE_INT, String.valueOf(message), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> String || <span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.log(<span class="keyword">null</span>, FQCN, LocationAwareLogger.TRACE_INT, String.valueOf(message), <span class="keyword">null</span>, exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Slf4jAdapter.createLocationAwareLog(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaUtilLog</span> <span class="keyword">implements</span> <span class="title">Log</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> java.util.logging.Logger logger;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JavaUtilLog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.logger = java.util.logging.Logger.getLogger(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFatalEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> isErrorEnabled();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isErrorEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isLoggable(java.util.logging.Level.SEVERE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWarnEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isLoggable(java.util.logging.Level.WARNING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInfoEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isLoggable(java.util.logging.Level.INFO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDebugEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isLoggable(java.util.logging.Level.FINE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTraceEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.logger.isLoggable(java.util.logging.Level.FINEST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatal</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">error(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatal</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">error(message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">log(java.util.logging.Level.SEVERE, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">log(java.util.logging.Level.SEVERE, message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">log(java.util.logging.Level.WARNING, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">log(java.util.logging.Level.WARNING, message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">log(java.util.logging.Level.INFO, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">log(java.util.logging.Level.INFO, message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">log(java.util.logging.Level.FINE, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">log(java.util.logging.Level.FINE, message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">log(java.util.logging.Level.FINEST, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line">log(java.util.logging.Level.FINEST, message, exception);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(java.util.logging.Level level, Object message, Throwable exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logger.isLoggable(level)) &#123;</span><br><span class="line">LogRecord rec;</span><br><span class="line"><span class="keyword">if</span> (message <span class="keyword">instanceof</span> LogRecord) &#123;</span><br><span class="line">rec = (LogRecord) message;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">rec = <span class="keyword">new</span> LocationResolvingLogRecord(level, String.valueOf(message));</span><br><span class="line">rec.setLoggerName(<span class="keyword">this</span>.name);</span><br><span class="line">rec.setResourceBundleName(logger.getResourceBundleName());</span><br><span class="line">rec.setResourceBundle(logger.getResourceBundle());</span><br><span class="line">rec.setThrown(exception);</span><br><span class="line">&#125;</span><br><span class="line">logger.log(rec);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JavaUtilLog(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationResolvingLogRecord</span> <span class="keyword">extends</span> <span class="title">LogRecord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FQCN = JavaUtilLog.class.getName();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> resolved;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LocationResolvingLogRecord</span><span class="params">(java.util.logging.Level level, String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(level, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSourceClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resolved) &#123;</span><br><span class="line">resolve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getSourceClassName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSourceClassName</span><span class="params">(String sourceClassName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.setSourceClassName(sourceClassName);</span><br><span class="line"><span class="keyword">this</span>.resolved = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSourceMethodName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resolved) &#123;</span><br><span class="line">resolve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getSourceMethodName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSourceMethodName</span><span class="params">(String sourceMethodName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.setSourceMethodName(sourceMethodName);</span><br><span class="line"><span class="keyword">this</span>.resolved = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StackTraceElement[] stack = <span class="keyword">new</span> Throwable().getStackTrace();</span><br><span class="line">String sourceClassName = <span class="keyword">null</span>;</span><br><span class="line">String sourceMethodName = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> found = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (StackTraceElement element : stack) &#123;</span><br><span class="line">String className = element.getClassName();</span><br><span class="line"><span class="keyword">if</span> (FQCN.equals(className)) &#123;</span><br><span class="line">found = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (found) &#123;</span><br><span class="line">sourceClassName = className;</span><br><span class="line">sourceMethodName = element.getMethodName();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">setSourceClassName(sourceClassName);</span><br><span class="line">setSourceMethodName(sourceMethodName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)  <span class="comment">// setMillis is deprecated in JDK 9</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">writeReplace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LogRecord serialized = <span class="keyword">new</span> LogRecord(getLevel(), getMessage());</span><br><span class="line">serialized.setLoggerName(getLoggerName());</span><br><span class="line">serialized.setResourceBundle(getResourceBundle());</span><br><span class="line">serialized.setResourceBundleName(getResourceBundleName());</span><br><span class="line">serialized.setSourceClassName(getSourceClassName());</span><br><span class="line">serialized.setSourceMethodName(getSourceMethodName());</span><br><span class="line">serialized.setSequenceNumber(getSequenceNumber());</span><br><span class="line">serialized.setParameters(getParameters());</span><br><span class="line">serialized.setThreadID(getThreadID());</span><br><span class="line">serialized.setMillis(getMillis());</span><br><span class="line">serialized.setThrown(getThrown());</span><br><span class="line"><span class="keyword">return</span> serialized;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring-jcl模块源码阅读&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#spring-jcl模块源码阅读&quot;&gt;¶&lt;/a&gt;spring-jcl模块源码阅读&lt;/h2&gt;
&lt;h3 id=&quot;spring-jcl模块功能&quot;&gt;&lt;a class=&quot;hea
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Java/Spring/"/>
    
      <category term="源码阅读" scheme="http://yoursite.com/categories/Java/Spring/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="spring-jcl" scheme="http://yoursite.com/categories/Java/Spring/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/spring-jcl/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="源码阅读" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="spring-jcl" scheme="http://yoursite.com/tags/spring-jcl/"/>
    
  </entry>
  
</feed>
